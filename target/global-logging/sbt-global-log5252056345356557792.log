[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@c7522c, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\ZGree\OneDrive\Documents\RevatureProjects\new\p0\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Oct 20, 2021 1:37:24 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ZGree/OneDrive/Documents/RevatureProjects/new/p0/src/main/scala/Main.scala","languageId":"scala","version":1,"text":"package example\r\npackage models\r\npackage tour\r\n\r\nimport scala.collection.immutable.IndexedSeq\r\nimport scala.io.Source\r\nimport org.mongodb.scala._\r\nimport org.mongodb.scala.model.Aggregates._\r\nimport org.mongodb.scala.model.Filters._\r\nimport org.mongodb.scala.model.Projections._\r\nimport org.mongodb.scala.model.Sorts._\r\nimport org.mongodb.scala.model.Updates._\r\n import org.mongodb.scala.model.Accumulators._\r\n\r\nimport org.mongodb.scala.model._\r\nimport scala.collection.JavaConverters._\r\nimport net.liftweb.json._\r\nimport scala.io.StdIn.readChar\r\nimport scala.io.StdIn.readLine\r\nimport scala.io.BufferedSource\r\nimport com.mongodb.client.result.UpdateResult\r\n\r\n\r\n/*\r\nXX \r\nXX Process File\r\nXX User Task/Request Prompting\r\nXX \r\n*/\r\nobject Main extends App {\r\n    val client: MongoClient = MongoClient()\r\n    val database: MongoDatabase = client.getDatabase(\"test\")\r\n    val collection: MongoCollection[Document] = database.getCollection(\"playDemo\")\r\n    Thread.sleep(2000)\r\n    print(\"\\nInserting\\n\")\r\n    val insertObservable: Observable[Completed] = collection.insertOne(Document(\"s#\" -> 312001, \"location\" -> \"IL\", \"Docked\" -> true))\r\n    insertObservable.subscribe(new Observer[Completed]\r\n    {\r\n        override def onNext(result: Completed): Unit = println(\"inserted\")\r\n        override def onError(e: Throwable): Unit = println(\"Failed\")\r\n        override def onComplete(): Unit = println(\"Completed\")\r\n    })\r\n    Thread.sleep(2000)\r\n    print(\"\\nClosing\\n\")\r\n    client.close()\r\n    Thread.sleep(2000)\r\n    /*\r\n    var menuSelec = true\r\n    var actionSelec = \"400\"\r\n    val file = Source.fromFile(\"C:\\\\Users\\\\ZGree\\\\OneDrive\\\\Documents\\\\RevatureProjects\\\\new\\\\p0\\\\src\\\\main\\\\scala\\\\Project0_BikeData.txt\")\r\n    val line = file.getLines().toList\r\n\r\n    val client: MongoClient = MongoClient()\r\n    val database: MongoDatabase = client.getDatabase(\"test\")\r\n    val collection: MongoCollection[Document] = database.getCollection(\"playDemo\")\r\n    Thread.sleep(5000)\r\n\r\n    for(doc <- line)\r\n    {\r\n        val str = doc.split(\",\")\r\n        val document: Document = Document(\"serialN\" -> str.apply(0), \"Location\" -> str.apply(1), \"status\" -> str.apply(2))\r\n        val insertObservable: Observable[Completed] = collection.insertOne(document)\r\n        insertObservable.subscribe(new Observer[Completed]\r\n        {\r\n            override def onNext(result: Completed): Unit = println(\"inserted\")\r\n            override def onError(e: Throwable): Unit = println(\"Failed\")\r\n            override def onComplete(): Unit = println(\"Completed\")\r\n        })\r\n    }\r\n    Thread.sleep(5000)\r\n \r\n    print(\"(m)Menu\\n(q)Quit\\n\")\r\n    menuSelec = (readChar() == 'm')\r\n    while(menuSelec)\r\n    {\r\n\r\n        print(\"(1)Rent\\n(2)Return\\n\")\r\n        readChar() match \r\n            {\r\n                case '1' =>\r\n                    for(doc <-line)\r\n                    {\r\n                        if(doc.split(\",\").apply(2) == \"true\")\r\n                        {\r\n                            print(doc + \"\\n\")\r\n                        }\r\n                        \r\n                    }\r\n                    print(\"Select Bike to Rent: \")\r\n                    actionSelec = readLine()\r\n                    collection.updateOne(equal(\"bikeSN\", actionSelec), set(\"status\", \"false\")).subscribe((updateResult: UpdateResult) => println(updateResult))\r\n                    Thread.sleep(2000)\r\n                    print(\"Bike \" + actionSelec + \" Selected. Enjoy Travel\\n\")\r\n                case '2' =>\r\n                    for(doc <-line)\r\n                    {\r\n                        if(doc.split(\",\").apply(2) == \"false\")\r\n                        {\r\n                            print(doc + \"\\n\")\r\n                        }\r\n                    }\r\n                    print(\"Enter Return Number: \")\r\n                    actionSelec = readLine()\r\n                    collection.updateOne(equal(\"bikeSN\", actionSelec), set(\"status\", \"true\")).subscribe((updateResult: UpdateResult) => println(updateResult))\r\n                    Thread.sleep(2000)\r\n                    print(\"Thank You, Bike \" + actionSelec + \" Returned\\n\")\r\n            }\r\n        print(\"(m)Menu\\n(q)Quit\\n\")\r\n        menuSelec = (readChar() == 'm')\r\n    }\r\n    client.close()\r\n*/\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
